diff --git a/modules/contrib/jstimer/src/Plugin/Field/FieldFormatter/JsTimerDefaultFormatter.php b/modules/custom/jstimer/src/Plugin/Field/FieldFormatter/JsTimerDefaultFormatter.php
index c4c62fb..0d84f1a 100644
--- a/modules/contrib/jstimer/src/Plugin/Field/FieldFormatter/JsTimerDefaultFormatter.php
+++ b/modules/contrib/jstimer/src/Plugin/Field/FieldFormatter/JsTimerDefaultFormatter.php
@@ -26,9 +26,9 @@ class JsTimerDefaultFormatter extends FormatterBase {
    */
   public static function defaultSettings() {
     $settings = array(
-      'dir' => 'down',
-      'format_txt' => ''
-    ) + parent::defaultSettings();
+        'dir' => 'down',
+        'format_txt' => ''
+      ) + parent::defaultSettings();

     return $settings;
   }
@@ -46,7 +46,7 @@ public function viewElements(FieldItemListInterface $items, $langcode) {
       if (!empty($item->date)) {
         if ($this->getFieldSetting('datetime_type') == 'date') {
           // A date without time will pick up the current time, use the default.
-          datetime_date_default_time($date);
+          $date->setDefaultDateTime();
         }

         // $date is a DrupalDateTime object
@@ -66,18 +66,18 @@ public function settingsForm(array $form, FormStateInterface $form_state) {
     $form = parent::settingsForm($form, $form_state);

     $form['dir'] = array(
-    '#title' => $this->t('Countdown or countup timer'),
-    '#type' => 'select',
-    '#options' => array('up' => $this->t('Up'), 'down' => $this->t('Down')),
-    '#default_value' => $this->getSetting('dir'),
-    '#weight' => 0,
+      '#title' => $this->t('Countdown or countup timer'),
+      '#type' => 'select',
+      '#options' => array('up' => $this->t('Up'), 'down' => $this->t('Down')),
+      '#default_value' => $this->getSetting('dir'),
+      '#weight' => 0,
     );

     $form['format_txt'] = array(
-    '#type' => 'textfield',
-    '#title' => $this->t('Format of the timer:'),
-    '#default_value' => $this->getSetting('format_txt'),
-    '#weight' => 1,
+      '#type' => 'textfield',
+      '#title' => $this->t('Format of the timer:'),
+      '#default_value' => $this->getSetting('format_txt'),
+      '#weight' => 1,
     );

     return $form;
@@ -95,7 +95,7 @@ public function settingsSummary() {


   protected function dateToWidget($unix_timestamp, $widget_name, $settings = array()) {
-    $datetime = date_iso8601($unix_timestamp);
+    $datetime = date('c', $unix_timestamp);

     $widget_args = array(
       'widget_name' => $widget_name,
